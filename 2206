#include<iostream>
#include<queue>
using namespace std;

int dx[4] = {-1,0,1,0};
int dy[4] = {0,1,0,-1};

int Visit[1000][1000][2] = {0, };
int Maps[1000][1000];
int X, Y;
int ans = -1;
void Solve(){
    queue<pair<pair<int, int>, int>>  q;
    q.push({{0, 0}, 1});
    Visit[0][0][1] = 1;
    while(!q.empty()){
        int x = q.front().first.first;
        int y = q.front().first.second;
        int z = q.front().second;
        //cout << x << " " << y << "      " << z << "     " << Visit[x][y][z] << endl;
        q.pop();

        if(x == X - 1 and y == Y - 1){
            ans = Visit[x][y][z];
            return;
        }
        for(int i = 0; i < 4; i++){
            int nx = x + dx[i];
            int ny = y + dy[i];
            if(0 <= nx && nx < X && 0 <= ny && ny < Y) {
                if (Maps[nx][ny] == 1 && z) {
                    Visit[nx][ny][z - 1] = Visit[x][y][z] + 1;
                    q.push({{nx, ny}, z - 1});
                }
                if (Maps[nx][ny] == 0 && Visit[nx][ny][z] == 0) {
                    Visit[nx][ny][z] = Visit[x][y][z] + 1;
                    q.push({{nx, ny}, z});
                }

            }
        }
    }
}

int main(){
    cin >> X >> Y;
    int i, j;
    for(i = 0; i < X; i++){
        for(j = 0; j < Y; j++){
            scanf("%1d", &Maps[i][j]);
        }
    }

    Solve();
    cout << ans << endl;
}
