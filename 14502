#include <cstdio>
#include <iostream>
#include <algorithm>
#include <stack>

using namespace std;

int lab[8][8];
int tempLab[8][8];
int n,m;
int ans = 0;

int dx[] = {0,0,-1,1};
int dy[] = {-1,1,0,0};

//지도 복사
void mapCopy(int (*a)[8], int (*b)[8]){
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            a[i][j] = b[i][j];
        }
    }
}

void virusSpread(){

    int Maps[8][8];
    mapCopy(Maps, tempLab);
    stack<pair<int, int>> s;

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            if(Maps[i][j] == 2) {
                s.push(make_pair(i, j));
            }
        }
    }

    while(!s.empty()){
        int x = s.top().first;
        int y = s.top().second;
        s.pop();
        for(int i = 0; i < 4; i++) {
            int nx = x + dx[i];
            int ny = y + dy[i];
            if (0 <= nx && nx < n && 0 <= ny && ny < m) {
                if (Maps[nx][ny] == 0) {
                    Maps[nx][ny] = 2;
                    s.push(make_pair(nx, ny));
                }
            }
        }
    }

    int cnt = 0;
    for(int i = 0; i < n; i++){
        for(int j = 0; j < m; j++){
            if(Maps[i][j] == 0)
                cnt+=1;
        }
    }
    ans = max(ans, cnt);
}
void wall(int cnt){
    if(cnt == 3){
        virusSpread();
        return;
    }
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            if(tempLab[i][j]==0){
                tempLab[i][j] = 1;
                wall(cnt+1);
                tempLab[i][j] = 0;
            }
        }
    }
}

int main(){
    cin >> n >> m;
    for(int i = 0; i < n; i++){
        for(int j = 0; j < m; j++){
            int tmp;
            cin >> tmp;
            lab[i][j] = tmp;
        }
    }
    //연구소에서 0인 부분을 모두 벽을 세워야 하므로 다음과 같이 진행.
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            if(lab[i][j] == 0){
                mapCopy(tempLab,lab);
                tempLab[i][j] =1;
                wall(1);
                tempLab[i][j] = 0;
            }
        }
    }
    cout << ans << endl;
    return 0;
}
