#include<iostream>
using namespace std;
#define MAX 1000004
typedef long long ll;
ll Arr[MAX] = {0, };
ll tree[MAX * 4] = {0, };
ll lazy[MAX * 4] = {0, };

void update_lazy(int start, int end, int node);
ll sum(int start, int end, int node, int left, int right){
    update_lazy(start, end, node);
    if(start > right || end < left)
        return 0;
    if(left <= start && end <= right)
        return tree[node];
    int mid = (start + end) / 2;
    return sum(start, mid, node * 2, left, right) + sum(mid + 1, end, node * 2 + 1, left, right);
}

void update_lazy(int start, int end, int node){
    if(lazy[node] == 0)
        return;

    tree[node] += (end - start + 1) * lazy[node];

    if(start != end){
        lazy[node * 2] += lazy[node];
        lazy[node * 2 + 1] += lazy[node];
    }
    lazy[node] = 0;
}

void update_range(int start, int end, int node, int left, int right, ll diff){
    update_lazy(start, end, node);
    if(left > end || right < start)
        return;
    if(left <= start && end <= right){
        tree[node] += (end - start + 1) * diff;
        if(start != end){
            lazy[node * 2] += diff;
            lazy[node * 2 + 1] += diff;
        }
        return;
    }
    int mid = (start + end) / 2;
    update_range(start, mid, node * 2, left, right, diff);
    update_range(mid + 1, end, node * 2 + 1, left, right, diff);

    tree[node] = tree[node * 2] + tree[node * 2 + 1];
}

ll init(int start, int end, int node){
    if(start == end)
        return tree[node] = Arr[start];
    int mid = (start + end) / 2;
    return tree[node] = init(start, mid, node * 2) + init(mid + 1, end, node * 2 + 1);
}
int main() {
    ios_base :: sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    int N, M, K;
    cin >> N >> M >> K;
    int cnt = M + K;
    for(int i = 1; i <= N; i++)
        cin >> Arr[i];
    init(1, N, 1);
    while(cnt--){
        int a, b, c, d;
        cin >> a;
        if(a == 1){
            cin >> b >> c >> d;
            update_range(1, N, 1, b, c, d);
        }
        else{
            cin >> b >> c;
            cout << sum(1, N, 1, b, c) << '\n';
        }
    }
}
