#include<iostream>
#include<string>
#include<cmath>

using namespace std;

int Move[4][50] = {
{-5,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,0},
{-4,2,4,6,8,10,13,16,19,25,30,35,40, 0},
{-3,2,4,6,8,10,12,14,16,18,20,22,24,25,30,35,40, 0},
{-2,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,28,27,26,25,30,35,40,0}};
int Mapsize[4] = {21, 13, 17, 23};
int Max = -100;
int moveway[10];

bool is_clear(int pos[4][2]){
    for(int i = 0; i < 3; i++){
        for(int j = i + 1; j < 4; j++){

            if(Move[pos[i][1]][pos[i][0]] == 25 && 25 == Move[pos[j][1]][pos[j][0]] && pos[i][1] != pos[j][1])
                return false;
            if(Move[pos[i][1]][pos[i][0]] == 35 && 35 == Move[pos[j][1]][pos[j][0]] && pos[i][1] != pos[j][1])
                return false;
            if(Move[pos[i][1]][pos[i][0]] == 40 && 40 == Move[pos[j][1]][pos[j][0]] && pos[i][1] != pos[j][1])
                return false;

            if(Move[pos[i][1]][pos[i][0]] == 30 && 30 == Move[pos[j][1]][pos[j][0]]){
                if(pos[i][1] != pos[j][1]){
                    if(pos[i][1] == 3 and pos[i][0] == 15 || pos[j][1] == 3 and pos[j][0] == 15){
                        continue;
                    }
                    else
                        return false;
                }
                else{
                    if(pos[i][0] == pos[j][0])
                        return false;
                }
            }

            if((pos[i][0] == pos[j][0]) and (pos[i][1] == pos[j][1]))
                if(pos[i][0] >= 1 && pos[i][0] < Mapsize[pos[i][1]])
                    return false;
        }
    }
    return true;
}

void copy(int tempos[4][2], int pos[4][2]){
    for(int i = 0; i < 4; i++){
        for(int j = 0; j < 2; j++)
            tempos[i][j] = pos[i][j];
    }
}

void print(int pos[4][2]){
    for(int i = 0; i < 4; i++)
        cout << pos[i][0] << " ";
    cout << endl;
}
void Solve(int N, int cnt, int pos[4][2]){
    if(N == 10){
        if(cnt > Max)
            Max = cnt;
        return;
    }
    int tmppos[4][2] = {0, };
    copy(tmppos, pos);
    for(int i = 0; i < 4; i++){
        copy(pos, tmppos);

        if(pos[i][0] + moveway[N] > Mapsize[pos[i][1]] && pos[i][0] < Mapsize[pos[i][1]])
            pos[i][0] = Mapsize[pos[i][1]];
        else if(pos[i][0] == Mapsize[pos[i][1]])
            continue;
        else
            pos[i][0] = pos[i][0] + moveway[N];

        if(pos[i][0] == 5 && pos[i][1] == 0)
            pos[i][1] = 1;
        if(pos[i][0] == 10 && pos[i][1] == 0)
            pos[i][1] = 2;
        if(pos[i][0] == 15 && pos[i][1] == 0)
            pos[i][1] = 3;

        if(!is_clear(pos))
            continue;

        Solve(N + 1, cnt + Move[pos[i][1]][pos[i][0]], pos);
    }
}

int main(){
    int N  = 10;
    for(int i = 0; i < N; i++)
        cin >> moveway[i];
    int pos[4][2] = {0, }; // x = position, y = map;
    Solve(0, 0, pos);
    cout << Max << endl;
}
