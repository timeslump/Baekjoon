#include<iostream>
#include<queue>
using namespace std;



int Max = 0;
int dx[6] = {0 , -1, 1, 0, 0 ,0};
int dy[6] = {1, 0, 0, -1,0, 0};
int dz[6] = {0, 0, 0, 0, 1, -1};
bool Visit[101][101][101];
int Maps[101][101][101];
int X, Y, H;
int cnt = 0;
struct info{
    int x,y, z;
    info(int a, int b, int c){
        x = a;
        y= b;
        z = c;
    }
};
queue<info> q;
void Solve(){
    int x, y, z;
    while(!q.empty()){
        x = q.front().x;
        y = q.front().y;
        z = q.front().z;
        for(int i = 0; i < 6; i++){
            int nx = x + dx[i];
            int ny = y + dy[i];
            int nz = z + dz[i];
            if(0 <= nx && nx < X && 0 <= ny && ny < Y && 0<= nz && nz < H && Maps[nz][nx][ny] == 0 && Visit[nz][nx][ny] == false){
                Visit[nz][nx][ny] = true;
                Maps[nz][nx][ny] = Maps[z][x][y] + 1;
                info temp(nx, ny, nz);
                q.push(temp);
            }
        }
        q.pop();
    }
}

void Check(){
    int Max = -1;
    int i, j;
    for(int k = 0; k < H; k++) {
        for (i = 0; i < X; i++) {
            for (j = 0; j < Y; j++) {
                if (Maps[k][i][j] == 0) {
                    cout << -1 << endl;
                    return;
                }
                if (Max < Maps[k][i][j])
                    Max = Maps[k][i][j];
            }
        }
    }
    cout << Max - 1 << endl;
}
int main(){
    cin >> Y >> X >> H;
    int i, j;
    for(int k = 0; k < H; k++) {
        for (i = 0; i < X; i++) {
            for (j = 0; j < Y; j++) {
                cin >> Maps[k][i][j];
                Visit[k][i][j] = false;
            }
        }
    }
    bool check = false;
    for(int k = 0; k < H; k++) {
        for (i = 0; i < X; i++) {
            for (j = 0; j < Y; j++) {
                if (Maps[k][i][j] == 1) {
                    info temp(i, j, k);
                    q.push(temp);
                }
            }
        }
    }
    Solve();
    Check();
}
