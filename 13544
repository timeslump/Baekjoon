#include <bits/stdc++.h>
using namespace std;
#define MAX 100011
vector<int> tree[MAX * 4];
int arr[MAX];

void update(int s, int e, int n, int index, int val){
    if(index < s || e < index)
        return;
    tree[n].push_back(val);
    if(s != e) {
        int mid = (s + e) / 2;
        update(s, mid, n * 2, index, val);
        update(mid + 1, e, n * 2 + 1, index, val);
    }
}

int sum(int s, int e, int n, int l, int r, int k){
    if(r < s || e < l)
        return 0;
    if(l <=  s&& e <= r){
        return tree[n].end() - upper_bound(tree[n].begin(), tree[n].end(), k);
    }
    int m = (s + e) / 2;
    return sum(s, m, n * 2, l ,r, k) + sum(m + 1, e, n * 2 + 1, l, r, k);
}

int main(){
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    int N, M;
    cin >> N;
    for(int i = 1; i<= N; i++){
        cin >> arr[i];
        update(1, N, 1, i, arr[i]);
    }

    for(int i = 0; i < N * 4; i++)
        sort(tree[i].begin(), tree[i].end());

    cin >> M;
    int lastans = 0;
    while(M--){
        int a, b, c;
        cin >> a >> b >> c;
        a = lastans ^ a;
        b = lastans ^ b;
        c = lastans ^ c;
        lastans = sum(1, N, 1, a, b, c);
        cout << lastans << "\n";
    }
}
