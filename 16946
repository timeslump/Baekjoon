#include<stdio.h>
#include<queue>
#include<set>
using namespace std;

int Map[1001][1001];
int N, M;
int dx[4] = {1, -1 ,0 ,0};
int dy[4] = {0, 0, 1, -1};
int Ans[1001][1001] = {0, };
int R[1001][1001] = {0, };
vector<int> v;

int num = 0;
void bfs(int i, int j){
    queue<pair<int, int>> q;
    q.push({i, j});
    num++;
    Ans[i][j] = num;
    int cnt = 1;
    while(!q.empty()){
        int x = q.front().first;
        int y = q.front().second;
        q.pop();
        for(int i = 0; i < 4; i++){
            int nx = x + dx[i];
            int ny = y + dy[i];
            if(0 > nx || nx >= N || 0 > ny || ny >= M || Ans[nx][ny] != 0 || Map[nx][ny] == 1)
                continue;
            cnt++;
            Ans[nx][ny] = num;
            q.push({nx, ny});
        }
    }
    v.push_back(cnt);
}
int main(void){
    v.push_back(0);
    scanf("%d %d", &N, &M);
    for(int i = 0; i < N; i++){
        for(int j = 0; j < M; j++){
            scanf("%1d",&Map[i][j]);
        }
    }
    for(int i = 0; i < N; i++){
        for(int j = 0; j < M; j++){
            if(Map[i][j] == 0 && Ans[i][j] == 0) {
                bfs(i, j);
            }
        }
    }
    for(int i = 0; i < N; i++){
        for(int j = 0; j < M; j++){
            int cnt = 0;
            if(Map[i][j] == 1) {
                set<int> s;
                for(int k = 0; k < 4; k++){
                    int nx = i + dx[k];
                    int ny = j + dy[k];
                    if(0 > nx || nx >= N || 0 > ny || ny >= M|| Map[nx][ny] == 1)
                        continue;
                    s.insert(Ans[nx][ny]);
                }
                for (auto k : s) cnt += v[k];
                R[i][j] = (cnt + 1) % 10;
            }
        }
    }

    for(int i = 0; i < N; i++){
        for(int j = 0; j < M; j++){
            printf("%d", R[i][j]);
        }
        printf("\n");
    }

}
