#include<bits/stdc++.h>

using namespace std;


int N, L;
int Map[101][101];
bool chk[101];
int ans = 0;
void Solve(){
    for(int i = 0; i < N; i++){
        bool check = true;
        fill(&chk[0], &chk[0] + N, 0);
        for(int j = 0; j < N - 1; j++){
            bool flag = false;
            if(Map[i][j] == Map[i][j + 1])
                continue;
            if(Map[i][j] == (Map[i][j + 1] + 1)){
                for(int k = 0; k < L; k++){
                    if(j + 1 + k >= N || chk[j + 1 + k] || Map[i][j + 1] != Map[i][j + 1 + k]){
                        check = false;
                        flag = true;
                        break;
                    }
                }
                if(flag)
                    break;
                for(int k = 0; k < L; k++)
                    chk[j + k + 1] = true;
            }
            else if((Map[i][j] + 1) == Map[i][j + 1]){
                for(int k = 0; k < L; k++){
                    if(j - k < 0 || chk[j - k] || Map[i][j] != Map[i][j - k]){
                        check = false;
                        flag = true;
                        break;
                    }
                }
                if(flag)
                    break;
                for(int k = 0; k < L; k++)
                    chk[j - k] = true;
            }
            else{
                check = false;
                break;
            }
        }
        if(check)
            ans++;
    }
}
int main(){
    cin >> N >> L;
    for(int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++)
            cin >> Map[i][j];
    }
    int temp[101][101];
    for(int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++)
            temp[i][j] = Map[j][i];
    }
    Solve();
    copy(&temp[0][0],&temp[0][0] + 101 * 101, &Map[0][0]);
    Solve();
    
    cout << ans;
}
