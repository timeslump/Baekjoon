#include<iostream>
#include<string>
#include<algorithm>
#include<vector>
#include<queue>
#define endl "\n"
using namespace std;

int Arr[51][51];
bool Visit[51][51];
int dx[4] = {1, -1, 0, 0};
int dy[4] = {0, 0, 1, -1};
int N, M, K, T;

void bfs(int i, int j){
    queue<pair<int, int>> q;
    q.push({i, j});
    Visit[i][j] = true;
    while(!q.empty()){
        int x = q.front().first;
        int y = q.front().second;
        q.pop();
        for(int i = 0; i < 4; i++){
            int nx = x + dx[i];
            int ny = y + dy[i];
            if(0 > nx || nx >= N || 0 > ny || ny >= M || Arr[nx][ny] == 0 || Visit[nx][ny])
                continue;
            Visit[nx][ny] = true;
            q.push({nx, ny});
        }
    }
    return;
}

int main(){
    cin >> T;
    while(T--) {
        fill(&Arr[0][0], &Arr[0][0]+ 51 * 51, 0);
        fill(&Visit[0][0], &Visit[0][0] + 51 * 51, 0);
        cin >> N >> M >> K;
        while(K--){
            int x, y;
            cin >> x >> y;
            Arr[x][y] = 1;
        }
        int cnt = 0;
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < M; j++) {
                if (Arr[i][j] == 1 && !Visit[i][j]) {
                    cnt++;
                    bfs(i, j);
                }
            }
        }
        cout << cnt << endl;
    }
}
