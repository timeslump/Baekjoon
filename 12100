#include<iostream>
#include <queue>
using namespace std;

int A[20][20] = {0, };
int N;
int count;
int maxx = 0;

void copy(int (* B)[20], int (* tmp)[20]){
	for(int i = 0; i < N; i++)
		for(int j = 0; j < N; j++)
			tmp[i][j] = B[i][j];
}

void print(int (* A)[20]){
	for(int i = 0; i < N; i++){
		for(int j = 0; j < N; j++)
			cout << A[i][j] << " ";
		cout << endl;
	}
	cout << endl;
}
void rotateup (int (* A)[20]){
	queue<int> q;
	int tmp;

	int k;
	
	for(int j = 0; j < N; j++){
		k = 0;
		for(int i = 0; i < N; i++){
			if(A[i][j] != 0)
				q.push(A[i][j]);
			A[i][j] = 0;
		}
		
		tmp = 0;
		
		while(!q.empty()){
			if(tmp == q.front() && A[k - 1][j] == q.front()){
				A[k - 1][j] = tmp * 2;
			}
			else
				A[k++][j] = q.front();
			tmp = q.front();
			q.pop();
		}
		for(int l = 0; l < N; l++)
			if(A[l][j] > maxx)
				maxx = A[l][j];		
		
	}
}

void rotatedown (int (* A)[20]){
	queue<int> q;
	int tmp;
	int k;
	for(int j = 0; j < N; j++){
		k = N - 1;
		int t[N] = {0, };
		for(int i = N - 1; i >= 0; i--){
			if(A[i][j] != 0)
				q.push(A[i][j]);
			A[i][j] = 0;
		}
		tmp = 0;
		while(!q.empty()){
			if(tmp == q.front() && A[k + 1][j] == q.front()){
				A[k + 1][j] = tmp * 2;
			}
			else
				A[k--][j] = q.front();
			tmp = q.front();
			q.pop();
		}
		for(int l = 0; l < N; l++)
			if(A[l][j] > maxx)
				maxx = A[l][j];	
	}
}

void rotateleft (int (* A)[20]){
	queue<int> q;
	int tmp;
	int k;
	for(int i = 0; i < N; i++){
		k = 0;
		for(int j = 0; j < N; j++){
			if(A[i][j] != 0)
				q.push(A[i][j]);
			A[i][j] = 0;
		}
		tmp = 0;
		while(!q.empty()){
			if(tmp == q.front() && A[i][k - 1] == q.front()){
				A[i][k - 1] = tmp * 2;
			}
			else
				A[i][k++] = q.front();
			tmp = q.front();
			q.pop();
		}
		for(int l = 0; l < N; l++)
			if(A[i][l] > maxx)
				maxx = A[i][l];	
	}
}

void rotateright (int (* A)[20]){
	queue<int> q;
	int tmp;
	int k;
	for(int i = 0; i < N; i++){
		k = N - 1;
		for(int j = N - 1; j >= 0; j--){
			if(A[i][j] != 0)
				q.push(A[i][j]);
			A[i][j] = 0;
		}
		tmp = 0;
		while(!q.empty()){
			if(tmp == q.front() && A[i][k + 1] == q.front()){
				A[i][k + 1] = tmp * 2;
			}
			else
				A[i][k--] = q.front();
			tmp = q.front();
			q.pop();
		}
		for(int l = 0; l < N; l++)
			if(A[i][l] > maxx)
				maxx = A[i][l];	
	}
}

void dfs(int B[20][20], int count){
	if(count == 5)
		return;
	int tmp[20][20] = {0, };
	
	copy(B, tmp);
	rotateup(tmp);
	dfs(tmp, count + 1);
	copy(B, tmp);
	rotatedown(tmp);
	dfs(tmp, count + 1);
	copy(B, tmp);
	rotateleft(tmp);
	dfs(tmp, count + 1);
	copy(B, tmp);
	rotateright(tmp);
	dfs(tmp, count + 1);
}


int main(){
	
	cin >> N;
	
	if(N == 1){
		int ans;
		cin >> ans;
		cout << ans << endl;
		return 0;
	}
	for(int i = 0; i < N; i++)
		for(int j = 0; j < N; j++)
			cin >> A[i][j];
	dfs(A, 0);
	cout << maxx << endl;	
}
