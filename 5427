#include<iostream>
#include<vector>
#include<queue>
using namespace std;

char Map[1002][1002];
int N, M;
queue<pair<int, int>> q;
queue<pair<int, int>> next_q;
queue<pair<int, int>> fire;
queue<pair<int, int>> next_fire;
int dx[4] = {1, 0, -1, 0};
int dy[4] = {0, 1, 0, -1};
int Max, cnt;
bool Escape(int x,int y){
    if(x == 0 || x == N - 1 || y == 0 || y == M - 1)
        return true;
    else
        return false;
}
void print(){
    for(int i = 0; i < N; i++){
        for(int j = 0; j < M; j++){
            cout << Map[i][j] << " ";
        }
        cout << endl;
    }
    cout << endl;
}
void bfs() {
    while (!q.empty()) {
        //print();
        cnt++;
        while (!fire.empty()) {
            int x = fire.front().first;
            int y = fire.front().second;
            fire.pop();
            for (int i = 0; i < 4; i++) {
                int nx = x + dx[i];
                int ny = y + dy[i];
                if (Map[nx][ny] == '.' || Map[nx][ny] == '@') {
                    Map[nx][ny] = '*';
                    next_fire.push({nx, ny});
                }
            }
        }
        while (!next_fire.empty()) {
            fire.push(next_fire.front());
            next_fire.pop();
        }
        while (!q.empty()) {
            int x = q.front().first;
            int y = q.front().second;
            q.pop();
            if (Escape(x, y)) {
                Max = cnt;
                return;
            }
            for (int i = 0; i < 4; i++) {
                int nx = x + dx[i];
                int ny = y + dy[i];
                if(Map[nx][ny] == '.') {
                    Map[nx][ny] = '@';
                    next_q.push({nx, ny});
                }
            }
        }
        while (!next_q.empty()) {
            q.push(next_q.front());
            next_q.pop();
        }
    }
}


int main(){
  int T;
  cin >> T;
  while(T--){
      cin >> M >> N;
      int i, j;
      for(i = 0; i < N; i++){
          for(j = 0; j < M; j++) {
              cin >> Map[i][j];
              if(Map[i][j] == '@')
                  q.push({i, j});
              if(Map[i][j] == '*')
                  fire.push({i, j});
          }
      }
      Max = -11;
      cnt = 0;
      bfs();
      if(Max == -11)
          cout << "IMPOSSIBLE" << endl;
      else
          cout << Max << endl;
      while(!fire.empty())
          fire.pop();
      while(!q.empty())
          q.pop();
      while(!next_q.empty())
          next_q.pop();
  }
}
