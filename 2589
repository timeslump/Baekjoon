#include<iostream>
#include<algorithm>
#include<vector>
#include<map>
#include<queue>
#include<string.h>
#define endl "\n"
using namespace std;
typedef unsigned long long ll;

char Map[52][52];

int R, C;
int dx[4] = {0, 1, 0, -1};
int dy[4] = {-1, 0, 1, 0};
bool Visit[52][52];
bool check(int x, int y){
    if(x >= 0 && x < R && y >= 0 && y < C)
        return true;
    return false;
}

int Max = 0;

void init(){
    for(int i = 0; i < R; i++) {
        for (int j = 0; j < C; j++)
            Visit[i][j] = false;
    }
}

void bfs(int i, int j){

    init();
    Visit[i][j] = true;
    queue<pair<int, int>> q;
    q.push({i, j});

    int cnt = 0;
    while(!q.empty()){
        int qs = q.size();
        cnt++;
        while(qs--){
            int x = q.front().first;
            int y = q.front().second;
            q.pop();
            for(int i = 0; i < 4; i++){
                int nx = x + dx[i];
                int ny = y + dy[i];
                if(check(nx, ny) && !Visit[nx][ny] && Map[nx][ny] == 'L') {
                    //cout << nx << ny;
                    Visit[nx][ny] = true;
                    q.push({nx, ny});
                }
            }
        }
    }
    Max = max(Max, cnt - 1);
    return;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cin >> R >> C;
    for(int i = 0; i < R; i++){
        for(int j = 0; j < C; j++){
            cin >> Map[i][j];
        }
    }

    for(int i = 0; i < R; i++){
        for(int j = 0; j < C; j++){
            if(Map[i][j] == 'L')
                bfs(i, j);
        }
    }
    cout << Max << endl;
}
