#include <bits/stdc++.h>
#include <map>
using namespace std;
#define endl "\n"
int ans = 100;
int N, M;
char Map[8][8];

int count(){
    int ans = 0;
    for(int i = 0; i < N; i++){
        for(int j = 0; j < M; j++){
            if(Map[i][j] == '0')
                ans++;
        }
    }
    return ans;
}

void up(int x, int y){
    while(x != -1 && Map[x][y] != '6'){
        if(Map[x][y] == '0')
            Map[x][y] = '#';
        x--;
    }
}
void down(int x, int y){
    while(x != N && Map[x][y] != '6'){
        if(Map[x][y] == '0')
            Map[x][y] = '#';
        x++;
    }
}
void left(int x, int y){
    while(y != -1 && Map[x][y] != '6'){
        if(Map[x][y] == '0')
            Map[x][y] = '#';
        y--;
    }
}
void right(int x, int y){
    while(y != M && Map[x][y] != '6'){
        if(Map[x][y] == '0')
            Map[x][y] = '#';
        y++;
    }
}
void copy(char a[][8], char b[][8]){
    for(int i = 0; i < N; i++){
        for(int j = 0; j < M; j++){
            a[i][j] = b[i][j];
        }
    }
}
void print(){
    for(int i = 0; i < N; i++){
        for(int j = 0; j < M; j++){
            cout <<Map[i][j] << " ";
        }
        cout << endl;
    }
    cout << endl;
}
void dfs(int n){
    char tempMap[8][8];
    //cout << n << endl;
    copy(tempMap, Map);
    if(n == N * M){
        //print();
        int cnt = count();
        ans = min(ans, cnt);
        return;
    }
    int x = n / M; int y = n % M;
    if(Map[x][y] == '0' || Map[x][y] == '6' || Map[x][y] =='#')
        dfs(n + 1);
    else if(Map[x][y] == '1'){
        up(x, y);
        dfs(n + 1);
        copy(Map, tempMap);
        down(x, y);
        dfs(n + 1);
        copy(Map, tempMap);
        left(x, y);
        dfs(n + 1);
        copy(Map, tempMap);
        right(x, y);
        dfs(n + 1);
    }
    else if(Map[x][y] == '2'){
        up(x, y);
        down(x, y);
        dfs(n + 1);
        copy(Map, tempMap);
        left(x, y);
        right(x, y);
        dfs(n + 1);
    }
    else if(Map[x][y] == '3'){
        up(x, y);
        left(x, y);
        dfs(n + 1);
        copy(Map, tempMap);
        left(x, y);
        down(x, y);
        dfs(n + 1);
        copy(Map, tempMap);
        down(x, y);
        right(x, y);
        dfs(n + 1);
        copy(Map, tempMap);
        right(x, y);
        up(x, y);
        dfs(n + 1);
    }
    else if(Map[x][y] == '4'){
        up(x, y);
        left(x, y);
        right(x, y);
        dfs(n + 1);
        copy(Map, tempMap);
        left(x, y);
        right(x, y);
        down(x, y);
        dfs(n + 1);
        copy(Map, tempMap);
        right(x, y);
        down(x, y);
        up(x, y);
        dfs(n + 1);
        copy(Map, tempMap);
        up(x, y);
        left(x, y);
        down(x, y);
        dfs(n + 1);
    }
    else if(Map[x][y] == '5'){
        up(x, y);
        down(x, y);
        left(x, y);
        right(x, y);
        dfs(n + 1);
    }
}
int main(){
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    cin >> N >> M;
    for(int i = 0; i < N; i++){
        for(int j = 0; j < M; j++){
            cin >> Map[i][j];
        }
    }
    dfs(0);
    cout << ans;
}
