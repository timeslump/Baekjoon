#include<iostream>
#include<vector>
#include<queue>
#include<cmath>
#include<string>
#include<algorithm>
using namespace std;

#define ll long long

int Arr[300][300];
int Visit[300][300];
int N, M, i, j;
int cnt = 0;
int dx[4] = {0, -1, 0, 1};
int dy[4] = {-1, 0 , 1 , 0};

bool Divide(){
    for(i = 0; i < N; i++){
        bool check = false;
        for(j = 0; j < M; j++){
            if(Arr[i][j] != 0){
                check = true;
                break;
            }
        }
        if(check)
            break;
    }
    queue<pair<int, int>> q;
    q.push({i,j});
    while(!q.empty()){
        int x = q.front().first;
        int y = q.front().second;
        q.pop();
        for(i = 0; i < 4; i++){
            int nx = x + dx[i];
            int ny = y + dy[i];
            if(0 <= nx && nx < N && 0 <= ny && ny < M && Visit[nx][ny] == 0 && Arr[nx][ny] != 0){
                Visit[nx][ny] = 1;
                q.push({nx, ny});
            }
        }
    }
    bool check = true;
    for(i = 0; i < N; i++){
        for(j = 0; j < M; j++){
            if(Visit[i][j] == 0 && Arr[i][j] != 0)
                return true;
            if(Arr[i][j] != 0){
                check = false;
            }
        }
    }
    if(check){
        cnt = 0;
        return true;
    }
    return false;
}


void Melt(){
    int tempArr[300][300] = {0, };
    for(i = 0; i < N; i++){
        for(j = 0; j < M; j++){
            if(Arr[i][j] != 0){
                int count = 0;
                for(int k = 0; k < 4; k++){
                    int ni = i + dx[k];
                    int nj = j + dy[k];
                    if(Arr[ni][nj] == 0)
                        count++;
                }
                if(Arr[i][j] < count)
                    continue;
                tempArr[i][j] = Arr[i][j] - count;
            }
        }
    }
    for(i = 0; i < N; i++){
        for(j = 0; j < M; j++){
            Arr[i][j] = tempArr[i][j];
        }
    }
}
void init(){
    for(i = 0; i < N; i++){
        for(j = 0; j < M; j++){
            Visit[i][j] = 0;
        }
    }
}

void print(){
    for(i = 0; i < N; i++){
        for(j = 0; j < M; j++){
            cout << Arr[i][j] << " ";
        }
        cout << endl;
    }
    cout << endl;
}

void bfs(){
    while(1){
        init();
        Melt();
        cnt++;
        if(Divide())
            return;
    }
}
int main(){
    ios_base :: sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    cin >> N >> M;
    for(i = 0; i < N; i++){
        for(j = 0; j < M; j++){
            cin >> Arr[i][j];
        }
    }
    bfs();
    cout << cnt << endl;
}
