#include <iostream>
#include <stack>
#include <queue>
using namespace std;

int Map[20][20]= {0,};
int Caneat[20][20]= {0, };
int N;
int size = 2;

int dx[4] = {-1, 0, 0, 1};
int dy[4] = {0, -1, 1, 0};
int Xs, Ys;
int dis = 0;
bool Possibleeat(){
    bool check = false;
    int cnt = 1;
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < N; ++j) {
            if(Map[i][j] < size && Map[i][j] != 9 && Map[i][j] != 0) {
                Caneat[i][j] = cnt++;
                check = true;
            }
            else
                Caneat[i][j] = 0;
            if(Map[i][j] == 9){
                Xs = i;
                Ys = j;
            }
        }
    }
    return check;
}

int find(int a, int b){
    int temp[20][20] = {0, };
    queue<pair<int, int>> q;
    q.push({a, b});
    Map[a][b] = 0;
    int min = 401;
    bool check = false;
    int mx, my;
    while(!q.empty()) {
        int qs = q.size();
        while (qs--) {
            int x = q.front().first;
            int y = q.front().second;
            q.pop();
            for (int i = 0; i < 4; i++) {
                int nx = x + dx[i];
                int ny = y + dy[i];
                if (nx < 0 || nx >= N || ny < 0 || ny >= N || temp[nx][ny] != 0 || Map[nx][ny] > size)
                    continue;
                temp[nx][ny] = temp[x][y] + 1;
                if (Caneat[nx][ny] != 0) {
                    if(min > Caneat[nx][ny]){
                        min = Caneat[nx][ny];
                        mx = nx;
                        my = ny;
                    }
                    check = true;
                }
                q.push({nx, ny});
            }
        }
        if(check){
            dis += temp[mx][my];
            Map[mx][my] = 9;
            return 1;
        }// 여기에 이제 최소 비교
    }
    return 0;
}
void print(){
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < N; ++j) {
            cout << Map[i][j] << " ";
        }
        cout << endl;
    }
    cout << endl;
}
int main(){
    ios_base :: sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    cin >> N;
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < N; ++j) {
            cin >> Map[i][j];
        }
    }
    int eatcnt = 0;
    while(Possibleeat()){
        if(find(Xs, Ys) == 0)
            break;
        eatcnt++;
        if(eatcnt == size){
            size++;
            eatcnt = 0;
        }
    }
    cout << dis << endl;
}
