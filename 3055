#include<iostream>
#include<algorithm>
#include<vector>
#include<map>
#include<queue>
#define endl "\n"
using namespace std;
typedef unsigned long long ll;

char Map[51][51];
bool Visit[51][51];
int R, C;
int cnt  = 0;
int Xs,Ys;
int Xh,Yh;
int dx[4] = {0, 1, 0, -1};
int dy[4] = {-1, 0, 1, 0};

bool check(int x, int y){
    if(x >= 0 && x < R && y >= 0 && y < C)
        return true;
    return false;
}

void flow(){
    char CopyMap[51][51];
    for(int i = 0; i < R; i++) {
        for (int j = 0; j < C; j++) {
            CopyMap[i][j] = Map[i][j];
        }
    }
    for(int i = 0; i < R; i++){
        for(int j = 0; j < C; j++) {
            if(Map[i][j] == '*'){
                for(int k = 0; k < 4; k++){
                    int nx = i + dx[k];
                    int ny = j + dy[k];
                    if(check(nx, ny) && Map[nx][ny] == '.')
                        CopyMap[nx][ny] = '*';
                }
            }
        }
    }
    for(int i = 0; i < R; i++) {
        for (int j = 0; j < C; j++) {
            Map[i][j] = CopyMap[i][j];
        }
    }
}
void bfs(int i, int j){
    queue<pair<int, int>> q;
    q.push({i, j});
    while(!q.empty()){
        int qs = q.size();
        flow();
        cnt++;
        while(qs--){
            int x = q.front().first;
            int y = q.front().second;
            q.pop();
            if(x == Xh && y == Yh){
                cout << cnt - 1;
                return;
            }
            for(int i = 0; i < 4; i++){
                int nx = x + dx[i];
                int ny = y + dy[i];
                if(check(nx, ny) && !Visit[nx][ny] && Map[nx][ny] != 'X' && Map[nx][ny] != '*') {
                    Visit[nx][ny] = true;
                    q.push({nx, ny});
                }
            }
        }
    }
    cout << "KAKTUS";
    return;
}
int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cin >> R >> C;
    for(int i = 0; i < R; i++){
        for(int j = 0; j < C; j++){
            cin >> Map[i][j];
            if(Map[i][j] == 'S'){
                Xs = i;
                Ys = j;
            }
            if(Map[i][j] == 'D'){
                Xh = i;
                Yh = j;
            }
        }
    }
    bfs(Xs, Ys);
}
