#include<iostream>
using namespace std;
#define MAX 500010
typedef long long ll;
int temp[1000010];
ll tree[MAX * 4] = {0, };
ll arr2[MAX];
ll cnt = 0;

void update(int start, int end, int node, int index, int diff){
    if(index < start || index > end)
        return;
    tree[node] += diff;
    if(start == end)
        return;
    int mid = (start + end) / 2;
    update(start, mid, node * 2, index, diff);
    update(mid +1, end, node * 2 + 1, index, diff);
}

int sum(int start, int end, int node, int left, int right){
    if(left > end || start > right)
        return 0;
    if(start >= left && right >= end)
        return tree[node];
    int mid = (start + end) / 2;
    return sum(start, mid, node * 2, left, right) + sum(mid + 1, end, node * 2 + 1, left, right);
}
int main() {
    ios_base :: sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);
    int N;
    cin >> N;
    int tmp;
    for(int i = 1; i <= N; i++){
        cin >> tmp;
        temp[tmp] = i;
    }
    for(int i = 1; i <= N; i++){
        cin >> tmp;
        arr2[i] = temp[tmp];
    }

    for(int i = 1; i <= N; i++){
        int pos = arr2[i];
        cnt += sum(1, N, 1, pos, N);
        update(1, N, 1, pos, 1);
    }

    cout << cnt;
}
