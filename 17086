#include <string>
#include <vector>
#include <iostream>
#include <algorithm>
#include <queue>
using namespace std;


int Map[50][50];
int Ans[50][50] = {0,};
int N, M;

int dx[8] = {1, 1, 0, 1, -1, -1, -1, 0};
int dy[8] = {1, -1, 1, 0, -1, 1, 0, -1};
int Max = 0;
void bfs(int i, int j){
    queue<pair<int, int>> q;
    int Visit[50][50] = {0, };
    q.push({i, j});
    while(!q.empty()){
        int x = q.front().first;
        int y = q.front().second;
        q.pop();
        for(int i = 0; i < 8; i++){
            int nx = x + dx[i];
            int ny = y + dy[i];
            if(nx < 0 || nx >= N || ny < 0 || ny >= M || Visit[nx][ny] != 0)
                continue;
            if(Map[nx][ny] == 1){
                Ans[i][j] = Visit[x][y] + 1;
                Max = max(Max, Ans[i][j]);
                return;
            }
            Visit[nx][ny] = Visit[x][y] + 1;
            q.push({nx, ny});
        }
    }
}
int main(){
    cin >> N >> M;
    for(int i = 0; i < N; i++){
        for(int j = 0; j < M; j++){
            cin >> Map[i][j];
        }
    }
    for(int i = 0; i < N; i++){
        for(int j = 0; j < M; j++){
            if(Map[i][j] == 0)
                bfs(i, j);
        }
    }
    
    cout << Max;
}
